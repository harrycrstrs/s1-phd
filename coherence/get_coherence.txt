# Snappy Import
import sys
sys.path.append('/home/s1332488/.snap/snap-python')
from snappy import ProductIO
from snappy import GPF
from snappy import HashMap

# Other Imports
import os.path as path
import os
import glob

# OUT_FOLDER set to storage place of final products
OUT_FOLDER = input('Folder to store interferograms (must exist): ')
# STORAGE_DIR set to storage place of COSSC images 
STORAGE_DIR = input('Folder to find S1 zip files: ')

# Input Swath information
passdir = input('Pass direction of input images: ')
swath = 'IW'+input('Swath number for TOPSAR-Split: ')
firstBurst = input('First Burst Index for TOPSAR-Split: ')
lastBurst = input('Last Burst Index for TOPSAR-Split: ')


def createP(function, inputProduct, writeout=False, **kwargs):
    # pythonic version of GPF.createProduct()
    # function is string of SNAP operator
    # inputProduct is SNAP product object
    # kwargs contains any parameters to pass to the operator
    p = HashMap()
    for arg in kwargs:
        p.put(arg,kwargs.get(arg))
    result = GPF.createProduct(function,p,inputProduct)
    if writeout != False:
        ProductIO.writeProduct(result,writeout,'BEAM-DIMAP')
    else:
        return result

files = glob.glob(os.path.join(STORAGE_DIR,'*.zip'))
files.sort() # Ensures they are in chronological order

N = len(files)
print('Discovered '+str(N)+' S1 zip files')

for i in range(N-1):
    date1 = files[i].split('_')[-4].split('T')[0]
    date2 = files[i+1].split('_')[-4].split('T')[0]
    outname = '_'.join(['S1',passdir,date1,date2,'coh_TC.dim'])
    if not os.path.exists(os.path.join(OUT_FOLDER,outname)):
        im1 = ProductIO.readProduct(files[i])
        im2 = ProductIO.readProduct(files[i+1])
        # Orbit files
        im1 = createP('Apply-Orbit-File',im1)
        im2 = createP('Apply-Orbit-File',im2)
        # Split
        im1 = createP('TOPSAR-Split',im1,writeout='TEMPORARY_IM1.dim',
            firstBurstIndex=firstBurst,lastBurst=lastBurst,selectedPolarisations='VV,VH',subswath=swath)
        im2 = createP('TOPSAR-Split',im2,writeout='TEMPORARY_IM2.dim',
            firstBurstIndex=firstBurst,lastBurst=lastBurst,selectedPolarisations='VV,VH',subswath=swath)
        # Coregister and Deburst -----------------------------------------------
        im1,im2 = ProductIO.readProduct('TEMPORARY_IM1.dim') , ProductIO.readProduct('TEMPORARY_IM2.dim')
        stack = createP('Back-Geocoding',[im1,im2],writeout='TEMPORARY_COREG.dim')
        stack = ProductIO.readProduct('TEMPORARY_COREG.dim')
        coherence = createP('Coherence',stack,cohWinAz=3,cohWinRg=10,subtractFlatEarthPhase='true',demName='SRTM 1Sec HGT',subtractTopographicPhase='true')
        deburst = createP('TOPSAR-Deburst',coherence,writeout='TEMPORARY_COH.dim')
        # Terrain Correction ---------------------------------------------------
        deburst = ProductIO.readProduct('TEMPORARY_COH.dim')
        TC = createP('Terrain-Correction',deburst,writeout=os.path.join(OUT_FOLDER,outname),
                    demName='SRTM 1Sec HGT',alignToStandardGrid='true',pixelSpacingInMeter=14.05,saveProjectedLocalIncidenceAngle='true')
        os.system('rm -r TEMPORARY*')
        print('*******************************')
        print('COMPLETED '+str(i+1)+' OF '+str(N-1))
    else:
        print('SKIPPED '+str(i+1)+' OF '+str(N-1))
        





